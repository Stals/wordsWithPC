#ifndef RANDOM_VECTOR#define RANDOM_VECTOR#include <vector>#include <time.h>// Это обычный Vector у которого есть возможность удалять элементи по индексу за константное время, но с потерей очередностиtemplate <class T>class randomVector: public std::vector<T>{public:	void deleteByIndex(size_t index);	size_t getRandomIndex();	T getRandomElement();	T getRandomAndDelete();};// Удаляет элемент вектора по индексуtemplate <class T>void randomVector<T>::deleteByIndex(size_t index){	if(size() > 0){		if(index+1 <= size()){			if(index+1 == size()){				// Индекс указывает на последний элемент - просто удалим его				pop_back();			}else{				// Если это не последний элемент 				// Меняем местами тот что нужно удалить и последний элемент				std::swap((*this)[index],(*this)[size()-1]);				pop_back();			}		}else{			// Индекс больше чем размер вектора			// exception		}	}}// Возвращает Случайное число между 0 и vector.size() - 1template <class T>size_t randomVector<T>::getRandomIndex(){	srand ( time(NULL) );	size_t randomIndex = rand() % size();	return randomIndex;}// Возвращает случайны элемент из вектораtemplate <class T>T randomVector<T>::getRandomElement(){	return (*this)[getRandomIndex()];}// Возвращает случайный элемент и удаляет его из вектораtemplate <class T>T randomVector<T>::getRandomAndDelete(){	size_t randomIndex = getRandomIndex();	T randomElement = (*this)[randomIndex];	this->deleteByIndex(randomIndex);	return randomElement;}#endif // RANDOM_VECTOR